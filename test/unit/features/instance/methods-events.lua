local lu = require("luaunit")
local Vue = require("instance.Vue")

describe('Instance methods events', function()
  local vm, spy
  ---@type Spy
  local spyObj
  beforeEach(function()
    vm = Vue.new()
    spyObj = lu.createSpy('emitter')
    spy = spyObj.call
  end)

  it('$on', function()
    vm:_on('test', function (this, ...)
      -- expect correct context
      lu.assertEquals(this, vm)
      spy(this, ...)
    end)
    vm:_emit('test', 1, 2, 3, 4)
    lu.assertEquals(#spyObj.calls, 1)
    spyObj.toHaveBeenCalledWith(vm, 1, 2, 3, 4)
  end)

  it('$on multi event', function()
    vm:_on({'test1', 'test2'}, function (this, ...)
      lu.assertEquals(this, vm)
      spy(this, ...)
    end)
    vm:_emit('test1', 1, 2, 3, 4)
    lu.assertEquals(#spyObj.calls, 1)
    spyObj.toHaveBeenCalledWith(vm, 1, 2, 3, 4)
    vm:_emit('test2', 5, 6, 7, 8)
    lu.assertEquals(#spyObj.calls, 2)
    spyObj.toHaveBeenCalledWith(vm, 5, 6, 7, 8)
  end)

  it('$off multi event', function()
    vm:_on({'test1', 'test2', 'test3'}, spy)
    vm:_off({'test1', 'test2'}, spy)
    vm:_emit('test1')
    vm:_emit('test2')
    spyObj.toHaventBeenCalled()
    vm:_emit('test3', 1, 2, 3, 4)
    lu.assertEquals(#spyObj.calls, 1)
  end)

  it('$off multi event without callback', function()
    vm:_on({'test1', 'test2'}, spy)
    vm:_off({'test1', 'test2'})
    vm:_emit('test1')
    spyObj.toHaventBeenCalled()
  end)

  it('$once', function()
    vm:_once('test', spy)
    vm:_emit('test', 1, 2, 3)
    vm:_emit('test', 2, 3, 4)
    lu.assertEquals(#spyObj.calls, 1)
    spyObj.toHaveBeenCalledWith(vm, 1, 2, 3)
  end)

  it('$off event added by $once', function()
    vm:_once('test', spy)
    vm:_off('test', spy) -- test off event and this event added by once
    vm:_emit('test', 1, 2, 3)
    spyObj.toHaventBeenCalled()
  end)

  it('$off', function()
    vm:_on('test1', spy)
    vm:_on('test2', spy)
    vm:_off()
    vm:_emit('test1')
    vm:_emit('test2')
    spyObj.toHaventBeenCalled()
  end)

  it('$off event', function()
    vm:_on('test1', spy)
    vm:_on('test2', spy)
    vm:_off('test1')
    vm:_off('test1') -- test off something that's already off
    vm:_emit('test1', 1)
    vm:_emit('test2', 2)
    lu.assertEquals(#spyObj.calls, 1)
    spyObj.toHaveBeenCalledWith(vm, 2)
  end)

  it('$off event + fn', function()
    local spy2Obj = lu.createSpy('emitter')
    local spy2 = spy2Obj.call
    vm:_on('test', spy)
    vm:_on('test', spy2)
    vm:_off('test', spy)
    vm:_emit('test', 1, 2, 3)
    spyObj.toHaventBeenCalled()
    lu.assertEquals(#spy2Obj.calls, 1)
    spy2Obj.toHaveBeenCalledWith(vm, 1, 2, 3)
  end)
end)
